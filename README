Middle Management manages your Delayed Job workers on Heroku. It "hires" and "fires" workers automatically so that you get all of your work done quickly for as little money as possible.

It requires delayed_job 2.1.2 or greater.

You can get it working out of the box with two quick steps:

1) Add "middle_management" to your Gemfile and run "bundle install"

2) Set the following REQUIRED environment variables using heroku config:add KEY=value:
  MIDDLE_MANAGEMENT_HEROKU_USERNAME (your heroku username)
  MIDDLE_MANAGEMENT_HEROKU_PASSWORD (your heroku password)
  MIDDLE_MANAGEMENT_HEROKU_APP (the name of your heroku app)
  MIDDLE_MANAGEMENT_MIN_WORKERS (the minimum number of workers to keep running; typically 0)
  MIDDLE_MANAGEMENT_MAX_WORKERS (the maximum number of workers to allow to run)

Deploy to heroku and voila - you've got auto-scaling workers!

How it works:

Every time a job is created or destroyed, Middle Management checks to see how many jobs are outstanding and how many workers are reserved to work on them.

If there are more jobs than workers, Middle Management will "hire" more workers to complete them. It will honor the maximum number of workers, as set by the MIDDLE_MANAGEMENT_MAX_WORKERS variable.

If there are more workers than jobs, Middle Management will "fire" the workers that are not being used. It will honor the minimum number of workers, as set by the MIDDLE_MANAGEMENT_MIN_WORKERS variable. If you use Delayed Job to schedule future jobs, you should always keep at least one worker running so that it can be worked off at the appropriate time. If all of your jobs are runnable at the time they are created, it is safe to set this to zero.

Step-by-step chart, assumes:
MIDDLE_MANAGEMENT_MIN_WORKERS=0
MIDDLE_MANAGEMENT_MAX_WORKERS=10

App Action                        Middle Management Action        Total Workers Running
Boot Up                                                           0
Rotate 3 images                   Start 3 workers                 3
First image rotated               Stop 1 worker                   2
Second image rotated              Stop 1 worker                   1
Send 105 emails with send_later   Start 8 workers                 10
First 10 emails sent                                              10
Next 10 emails sent                                               10
Next 10 emails sent                                               10
Next 10 emails sent                                               10
Next 10 emails sent                                               10
Next 10 emails sent                                               10
Next 10 emails sent                                               10
Next 10 emails sent                                               10
Next 10 emails sent                                               10
Next 10 emails sent               Stop 5 workers                  5
Last 5 emails sent                Stop 5 workers                  0
